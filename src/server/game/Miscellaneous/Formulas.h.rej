--- src/server/game/Miscellaneous/Formulas.h
+++ src/server/game/Miscellaneous/Formulas.h
@@ -23,7 +23,31 @@
 #include "SharedDefines.h"
 #include "ScriptMgr.h"
 #include "Player.h"
-
+#include "Config.h"
+// Prepatch by LordPsyan
+// 01
+// 02
+// 03
+// 04
+// 05
+// 06
+// 07
+// 08
+// 09
+// 10
+// 11
+// 12
+// 13
+// 14
+// 15
+// 16
+// 17
+// 18
+// 19
+// 20
+// Visit http://www.realmsofwarcraft.com/bb for forums and information
+//
+// End of prepatch
 namespace Trinity
 {
     namespace Honor
@@ -183,13 +207,40 @@ namespace Trinity
 
                     xpMod *= creature->GetCreatureTemplate()->ModExperience;
                 }
-
+            if(sConfigMgr->GetBoolDefault("PrepatchGI.Added", false))
+                {
+                    // Prepatch by LordPsyan
+                    // 21
+                    // 22
+                    // 23
+                    // 24
+                    // 25
+                    // 26
+                    // 27
+                    // 28
+                    // 29
+                    // 30
+                    // 31
+                    // 32
+                    // 33
+                    // 34
+                    // 35
+                    // 36
+                    // 37
+                    // 38
+                    // 39
+                    // 40
+                    // Visit http://www.realmsofwarcraft.com/bb for forums and information
+                    //
+                    // End of prepatch
+                } else {
                 xpMod *= isBattleGround ? sWorld->getRate(RATE_XP_BG_KILL) : sWorld->getRate(RATE_XP_KILL);
                 if (creature && creature->m_PlayerDamageReq) // if players dealt less than 50% of the damage and were credited anyway (due to CREATURE_FLAG_EXTRA_NO_PLAYER_DAMAGE_REQ), scale XP gained appropriately (linear scaling)
                     xpMod *= 1.0f - 2.0f*creature->m_PlayerDamageReq / creature->GetMaxHealth();
 
                 gain = uint32(gain * xpMod);
             }
+            }
 
             sScriptMgr->OnGainCalculation(gain, player, u);
             return gain;
